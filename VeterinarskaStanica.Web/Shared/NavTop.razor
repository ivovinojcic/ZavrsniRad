@using VeterinarskaStanica.Web.Helper
@using VeterinatskaStanica.Pages.User
@using VeterinarskaStanica.Service.AppService
@using Microsoft.AspNetCore.Http

@inject AppState State
@inject IUserService UserService
@inject IModalService Modal
@inject IHttpContextAccessor HttpContextAccessor


<nav class="sb-topnav navbar navbar-expand navbar-dark bg-dark">
    <a class="navbar-brand" href="/">Veterinarska stanica</a>
    <button @onclick="ShowHideLeftNav" class="btn btn-link btn-sm order-1 order-lg-0" id="sidebarToggle">
        <i class="fa fa-bars"></i>
    </button>
    <div class="spinner-border text-light ml-4@(State.Spinner ? "" : " d-none")" role="status">
        <span class="sr-only">Učitavanje...</span>
    </div>
    <!-- Navbar Search-->
    <div class="d-none d-md-inline-block ml-auto mr-0 mr-md-3 my-2 my-md-0">
        <!-- Navbar-->
        <ul class="navbar-nav ml-auto ml-md-0">
            <li class="nav-item dropdown">
                <a class="nav-link dropdown-toggle" id="userDropdown" href="#" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <i class="fa fa-user fa-fw"></i>
                </a>
                <div class="dropdown-menu dropdown-menu-right" aria-labelledby="userDropdown">
                    <a class="dropdown-item" href="javascript:void(0)" @onclick="OpenModal">Postavke računa</a>
                    <div class="dropdown-divider"></div>
                    <a class="dropdown-item" href="/account/logout">Odjavi se</a>
                </div>
            </li>
        </ul>
    </div>
</nav>

@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            State.PropertyChanged += StateChanged;
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private void StateChanged(object o, System.ComponentModel.PropertyChangedEventArgs e)
    {
        StateHasChanged();
    }

    private void ShowHideLeftNav()
    {
        State.LeftNav = !State.LeftNav;
    }

    /// <summary>
    /// Open "ModalView" to edit current user
    /// </summary>
    /// <returns></returns>
    private async void OpenModal()
    {
        if(!State.Modal)
        {
            State.Modal = true;

            var parameters = new ModalParameters();
            //Adding parameters that will be transfered to "ModalView"
            parameters.Add(nameof(ModalView.userId), (await UserService.GetUser(HttpContextAccessor.HttpContext.User.Identity.Name)).Id);
            parameters.Add(nameof(ModalView.roleId), 0);
            parameters.Add(nameof(ModalView.selfEdit), true);

            //Title of "ModalView"
            string modalTitle = "Uredi podatke";

            var formModal = Modal.Show<ModalView>(modalTitle, parameters);

            State.Modal = false;
        }
    }
}