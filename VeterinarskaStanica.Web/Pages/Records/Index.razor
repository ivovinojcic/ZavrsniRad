@page "/termini"
@page "/termini/{userId:int}"

@using VeterinarskaStanica.Service.AppService
@using VeterinarskaStanica.Model.Model.Datatable
@using VeterinarskaStanica.Model.Core
@using VeterinarskaStanica.Model.Model.Records
@using CurrieTechnologies.Razor.SweetAlert2
@using VeterinarskaStanica.Web.Helper
@using Microsoft.AspNetCore.Http

@attribute [Authorize(Roles = "Klijent, Zaposlenik")]
@layout MainLayout

@inject IJSRuntime JSRuntime
@inject IRecordsService RecordsService
@inject IUserService UserService
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager
@inject SweetAlertService Swal
@inject AppState State
@inject IModalService Modal

<main>
    <div class="container-fluid">
        <h1 class="mt-4">@(user != null ? $"{(user.RoleId == 2 ? "Zaposlenik" : "Korisnik")} {user.Name} {user.Surname} - {user.Username}" : "Učitavanje..")</h1>
        <div class="card mb-4 mt-4">
            <div class="card-header">
                <div class="float-left">
                    <i class="fa fa-table mr-1"></i>
                    Tablica termina
                </div>
                @if (user != null && user.RoleId == 3)
                {
                    <div class="float-right">
                        <button @onclick="@(() => OpenModal(0, userId, false))" class="btn btn-primary ml-2">
                            Zakaži termin <i class="fa fa-plus ml-2"></i>
                        </button>
                    </div>
                }
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <div id="dataTable_wrapper" class="dataTables_wrapper dt-bootstrap4">
                        <div class="row mb-3">
                            <div class="col-sm-12 col-md-6 mt-4 mb-4">
                                <button @onclick="() => ChangeStatusView(0)" class="btn mr-1 @(statusId == 0 ? ("btn-primary") : ("btn-outline-dark"))">Sve</button>
                                <button @onclick="() => ChangeStatusView(1)" class="btn mr-1 @(statusId == 1 ? ("btn-primary") : ("btn-outline-dark"))">Na čekanju</button>
                                <button @onclick="() => ChangeStatusView(2)" class="btn mr-1 @(statusId == 2 ? ("btn-primary") : ("btn-outline-dark"))">Potvrđeno</button>
                                <button @onclick="() => ChangeStatusView(3)" class="btn @(statusId == 3 ? ("btn-primary") : ("btn-outline-dark"))">Odrađeno</button>
                                <button @onclick="() => ChangeStatusView(4)" class="btn @(statusId == 4 ? ("btn-primary") : ("btn-outline-dark"))">Odbijeno</button>

                            </div>
                            <div class="col-sm-12 col-md-12">
                                <div class="dataTables_length" id="dataTable_length">
                                    <label>
                                        Prikaži
                                        <select name="dataTable_length" aria-controls="dataTable" class="custom-select custom-select-sm form-control form-control-sm" @onchange="@((ChangeEventArgs e) => ChangePerPage(Int32.Parse(e.Value.ToString())))">
                                            <option value="10">10</option>
                                            <option value="25">25</option>
                                            <option value="50">50</option>
                                            <option value="100">100</option>
                                        </select> rezultata
                                    </label>
                                </div>
                            </div>
                            <div class="col-sm-12 col-md-6 mt-4">
                                <div id="dataTable_filter" class="dataTables_filter">
                                    <label>
                                        Pretraži:
                                        <input type="search" class="form-control form-control-sm" placeholder="Pretraži.." aria-controls="dataTable" @oninput="@((ChangeEventArgs args) => FilterChangedAsync(args.Value.ToString()))">
                                    </label>
                                </div>
                            </div>
                        </div>
                        @if (records.Count < 1 && !firstLoading)
                        {
                            <div class="text-center mt-5">
                                <p>Trenutno nema podataka koji zadovoljavaju postavljene kriterije pretrage.</p>
                            </div>
                        }
                        else
                        {
                            <div class="row">
                                <div class="col-sm-12">
                                    <table class="table table-bordered dataTable" id="dataTable" width="100%" cellspacing="0" role="grid" aria-describedby="dataTable_info" style="width: 100%;">
                                        <thead>
                                            <tr role="row">
                                                <th @onclick='() => SortBy("Id")' class="sorting@(options.SortBy.Equals("Id") ? (options.SortByDirection.Equals("asc") ? "_asc" : "_desc") : "")" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" style="width: 75px;">#</th>
                                                <th tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" style="width: 150px;">Ime Korisnika</th>
                                                <th tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" style="width: 150px;">Ime životinje</th>
                                                <th tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" style="width: 150px;">Vrsta životinje</th>
                                                <th tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" style="width: 150px;">Zadužena osoba</th>
                                                <th @onclick='() => SortBy("Date")' class="sorting@(options.SortBy.Equals("Date") ? (options.SortByDirection.Equals("asc") ? "_asc" : "_desc") : "")" tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" style="width: 150px;">Datum pregleda</th>
                                                <th tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" style="width: 150px;">Status</th>
                                                <th tabindex="0" aria-controls="dataTable" rowspan="1" colspan="1" style="width: 150px;">Akcije</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (RecordsTable record in records)
                                            {
                                                <tr role="row" class="@(records.IndexOf(record) % 2 == 0 ? "even" : "odd")">
                                                    <td>@record.Id</td>
                                                    <td>@record.UserName</td>
                                                    <td>@record.PetName</td>
                                                    <td>@record.PetType</td>
                                                    <td>@record.EmployeeName</td>
                                                    <td>@record.Date</td>
                                                    <td>@record.RecordStatus</td>
                                                    <td>
                                                        @if (user != null && user.RoleId == 3)
                                                        {
                                                            <button @onclick="() => OpenModal(record.Id, record.UserId, true)" class="btn btn-primary" title="Pregled">
                                                                <i class="fa fa-eye"></i>
                                                            </button>
                                                        }
                                                        else if (user != null && user.RoleId == 2)
                                                        {
                                                            <button @onclick="@(() => OpenModal(record.Id, record.UserId, false))" class="btn btn-primary" title="Uredi">
                                                                <i class="fa fa-edit"></i>
                                                            </button>
                                                        }
                                                        @if (record.RecordStatusId != 4)
                                                        {
                                                            <button @onclick="@(() => MakeRecordDenied(record.Id))" class="btn btn-danger ml-2" title="Poništi termin">
                                                                <i class="fa fa-times-circle"></i>
                                                            </button>
                                                        }
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                            <div class="row mt-4">
                                <div class="col-sm-12 col-md-5">
                                    <div class="dataTables_info" id="dataTable_info" role="status" aria-live="polite">Trenutno prikazano @(((options.Page - 1) * options.PerPage) + 1) do @(records.Count + ((options.Page - 1) * options.PerPage)) od @options.TotalRecords podataka</div>
                                </div>
                                @if (options.TotalPages > 1)
                                {
                                    <div class="col-sm-12 col-md-7">
                                        <div class="dataTables_paginate paging_simple_numbers" id="dataTable_paginate">
                                            <ul class="pagination">
                                                @if (options.TotalPages > 5)
                                                {
                                                    <li class="paginate_button page-item previous @(options.FirstShowPage == 1 ? (MarkupString)"disabled" : (MarkupString)"")" id="kt_table_1_previous">
                                                        <a aria-controls="dataTable" data-dt-idx="0" tabindex="0" class="page-link" @onclick="@(() => ChangePage(1))">
                                                            <i class="fas fa-chevron-left"></i>
                                                            <i class="fas fa-chevron-left"></i>
                                                        </a>
                                                    </li>
                                                }
                                                <li class="paginate_button page-item previous @(options.Page == options.FirstShowPage ? (MarkupString)"disabled" : (MarkupString)"")" id="kt_table_1_previous">
                                                    <a aria-controls="dataTable" data-dt-idx="0" tabindex="0" class="page-link" @onclick="@(() => ChangePage(options.Page - 1))">
                                                        <i class="fas fa-chevron-left"></i>
                                                    </a>
                                                </li>
                                                <li class="paginate_button page-item @(options.Page == options.FirstShowPage ? (MarkupString)"active" : (MarkupString)"")">
                                                    <a aria-controls="dataTable" data-dt-idx="1" tabindex="0" class="page-link" @onclick="@(() => ChangePage(options.FirstShowPage))">@options.FirstShowPage</a>
                                                </li>
                                                @for (var i = (options.FirstShowPage + 1); i <= (options.TotalPages > options.LastShowPage ? options.LastShowPage : options.TotalPages); i++)
                                                {
                                                    var currentIndex = i;
                                                    <li class="paginate_button page-item @(options.Page == i ? (MarkupString)"active" : (MarkupString)"")">
                                                        <a aria-controls="dataTable" data-dt-idx="@i" tabindex="0" class="page-link" @onclick="@(() => ChangePage(currentIndex))">@i</a>
                                                    </li>
                                                }
                                                <li class="paginate_button page-item previous @(options.TotalPages == options.Page ? (MarkupString)"disabled" : (MarkupString)"")" id="kt_table_1_previous">
                                                    <a aria-controls="dataTable" data-dt-idx="0" tabindex="0" class="page-link" @onclick="@(() => ChangePage(options.Page + 1))">
                                                        <i class="fas fa-chevron-right"></i>
                                                    </a>
                                                </li>
                                                @if (options.TotalPages > 5)
                                                {
                                                    <li class="paginate_button page-item previous @(options.LastShowPage == options.TotalPages ? (MarkupString)"disabled" : (MarkupString)"")" id="kt_table_1_previous">
                                                        <a aria-controls="dataTable" data-dt-idx="0" tabindex="0" class="page-link" @onclick="@(() => ChangePage(options.TotalPages))">
                                                            <i class="fas fa-chevron-right"></i>
                                                            <i class="fas fa-chevron-right"></i>
                                                        </a>
                                                    </li>
                                                }
                                            </ul>
                                        </div>
                                    </div>
                                }

                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>

@code{

    [Parameter]
    public int userId { get; set; }

    private User user { get; set; }
    private List<RecordsTable> records = new List<RecordsTable>();
    private DatatableOptions options = new DatatableOptions();

    private bool firstLoading = true;
    private int statusId = 0;

    protected override async Task OnInitializedAsync()
    {
        //Check does userId exist
        if (userId != 0)
        {
            //if userId != 0, only "Zaposlenik" have access to page
            if (HttpContextAccessor.HttpContext.User.IsInRole("Klijent"))
            {
                NavigationManager.NavigateTo("/");

                return;
            }

            user = await UserService.GetUser(userId);
        }
        else
        {
            user = await UserService.GetUser(HttpContextAccessor.HttpContext.User.Identity.Name);

            userId = user.Id;
        }

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //Change "Page Title"
            await JSRuntime.InvokeVoidAsync("ChangePageTitle", "Veterinarska stanica | Termini");

            //Update list of records
            await UpdateOptions();

            firstLoading = false;

            await InvokeAsync(() => StateHasChanged());
        }
    }

    #region Table methods

    /// <summary>
    /// Update list options
    /// </summary>
    /// <returns></returns>
    private async Task UpdateOptions()
    {
        // Get records from database with specific options
        records = await RecordsService.GetRecords(options, user.RoleId == 2 ? 0 : userId, user.RoleId == 3 ? 0 : userId, statusId);

        // Get number of total records in database
        options.TotalRecords = await RecordsService.CountRecords(options, user.RoleId == 2 ? 0 : userId, user.RoleId == 3 ? 0 : userId, statusId);

        // Update Options
        options = UserService.UpdateDatatableOptions(options);
    }

    /// <summary>
    /// Change page for table
    /// </summary>
    /// <param name="page"></param>
    /// <returns></returns>
    private async Task ChangePage(int page)
    {
        options.Page = page;
        await UpdateOptions();
        await InvokeAsync(() => StateHasChanged());
    }

    /// <summary>
    /// Change number of record per page
    /// </summary>
    /// <param name="perPage"></param>
    /// <returns></returns>
    private async Task ChangePerPage(int perPage)
    {
        options.Page = 1;
        options.PerPage = perPage;
        await UpdateOptions();
        await InvokeAsync(() => StateHasChanged());
    }

    /// <summary>
    /// Change search data
    /// </summary>
    /// <param name="args"></param>
    /// <returns></returns>
    private async Task FilterChangedAsync(string search)
    {
        options.Search = search;
        await UpdateOptions();
        await InvokeAsync(() => StateHasChanged());
    }

    /// <summary>
    /// Sort data by specific row
    /// </summary>
    /// <param name="sortBy"></param>
    /// <returns></returns>
    private async Task SortBy(string sortBy)
    {
        options.SortByDirection = options.SortBy.Equals(sortBy) ? (options.SortByDirection.Equals("asc") ? "desc" : "asc") : "asc";
        options.SortBy = sortBy;
        await UpdateOptions();
        await InvokeAsync(() => StateHasChanged());
    }

    private async Task ChangeStatusView(int statusId)
    {
        this.statusId = statusId;

        await UpdateOptions();

        await InvokeAsync(() => StateHasChanged());
    }

    #endregion

    #region

    /// <summary>
    /// Open "ModalView" for edit or create
    /// </summary>
    /// <param name="id">parameter id is 0 then is create</param>
    /// <param name="userId">parameter userId</param>
    /// <returns></returns>
    private async void OpenModal(int id, int userId, bool isReadonly)
    {
        if (!State.Modal)
        {
            State.Modal = true;

            int employeeId = 0;

            if(HttpContextAccessor.HttpContext.User.IsInRole("Zaposlenik"))
            {
                employeeId = (await UserService.GetUser(HttpContextAccessor.HttpContext.User.Identity.Name)).Id;
            }

            var parameters = new ModalParameters();

            //Adding parameters that will be transfered to "ModalView"
            parameters.Add(nameof(ModalView.id), id);
            parameters.Add(nameof(ModalView.userId), userId);
            parameters.Add(nameof(ModalView.employeeId), employeeId);
            parameters.Add(nameof(ModalView.petId), 0);
            parameters.Add(nameof(ModalView.isReadonly), isReadonly);

            //Title of "ModalView"
            string modalTitle = (id != 0 ? "Uredi" : "Kreiraj") + " termin";

            var formModal = Modal.Show<ModalView>(modalTitle, parameters);

            var result = await formModal.Result;

            if (result.Cancelled)
            {
                await UpdateOptions();

                await InvokeAsync(
                    () => StateHasChanged()
                );
            }

            State.Modal = false;
        }
    }

    private async void MakeRecordDenied(int id)
    {
        if(!State.Spinner)
        {
            State.Spinner = true;

            await InvokeAsync(() => StateHasChanged());

            await RecordsService.MakeRecordDenied(id);

            await UpdateOptions();

            State.Spinner = false;

            await InvokeAsync(() => StateHasChanged());
        }
    }

    #endregion
}
